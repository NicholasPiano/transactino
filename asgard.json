{
  "version": "0.1.1",
  "date": {
    "description": "Log entries by date",
    "children": {
      "20181120": {
        "description": "Thinking about the unification of the three main servers, Wotan, Heimdall, and Freya.",
        "children": {
          "the lifetime of a client request": "The client wants information. How can they access that information? What kind of client are they? The client wants one of two things: (a) an immediate response to their question, or (b) a scheduled or triggered calculation that will deliver the information to them as soon as it is ready. To achieve (a), all you need is a server that responds to every question with data that can be read or calculated nearly instantly. To achieve (b), two additional servers, or at least 'concerns' are required. First, how do I get in touch with the client later when I have the information? Second, how do I know what 'later' means? All of this could be done with a single server, but it is cleaner to separate the concerns into three parts. Wotan is a synchronous web server that only stores data and responds to questions as fast as it possibly can. Heimdall is an asyncronous websocket server that maintains connections with the actual clients, but relays all incoming messages to Wotan, and relays all replies from Wotan to the correct client. If a task needs to be run on a regular basis, the first cause of that need must come from a client message to Heimdall, then to Wotan, and finally to Freya, who makes a record of the task in her database. The task encodes only a package that must be sent to Wotan when the time is right. Wotan will run the method, sending the output to Heimdall as usual, who will then relay it to the correct client.",
        }
      },
      "20181125": {
        "description": "Need to prepare for 1.0 release. This needs to be the simplest version of the software. All mechanical aspects are in place. All that remains is the deployment.",
        "children": {
          "simplest deployment": "Probably the best way to do this is to use the setup I had before with asgi and redis using Django only. This would require some modifications to the Wotan package. I should have everything running on the same machine. I should also put the Django code behind Daphne and nginx. This can be added as a part of the yggdrasil configuration."
        }
      },
      "20190301": {
        "description": "As I think of what is needed to move into production, I think about the state of the application compared to that in my work. In my work, I see low-cost incremental changes made in favour of large, breaking changes. This makes sense, but passes over much needed refactoring. I see the same thing in this project, since it has now grown large enough that any change is daunting, or at least changes that would change fundamentally how the application works. I have questions in my mind about continuous deployment, database migrations, multiple backends and frontends, etc. If I were to construct a huge web of nodes, then things would inevitably slow down. Talking with SJ, I realise that in order to have any record of changes that is without error, a system such as a blockchain that enforces order is necessary. The further you decentralise, the more you need an enforcement mechanism for changes in order to remain in sync. The source of truth must be singular.",
        "children": {
          "sources of truth": "It seems foolish, but it might be worth considering how something would work with many sources of truth, or at least deal with a fragmentation of the truth. For example, a web application might rely on a backend server for data, but at what point could it consider its own local data store as most truthy? A real-world example is the web application that I am building in my work. Data is polled every ten seconds, but if a change is made locally, what is true? If a user toggles a value, they should expect to see that change immediately, and for it to stay that way, despite a possible incoming update from the backend. Maybe applications should learn to deal with multiple sources of truth, rather than asymptotically approaching the blockchain model.",
          "superadmin": "",
          "more complex data from the blockchain": "",
        }
      },
      "20190302": {
        "description": "Thinking about what needs to be done to show this to a company. It must be polished and usable enough on the surface that it can immediately form a crucial part of a larger application without jeapordising security, assuming my ideas about security are good at all. There are some things I will not do, like use tokens or usernames and passwords in some web 2.0 interface.",
        "children": {
          "email": "It's possible, like the company in the JBS, that any client I do find will want the values emailed to them directly. I don't need to do this now, but it would be an easy changes to make; adding an Email object to the database and adding a trigger to a task. This can be done quickly if needed.",
          "encrypt solved challenge": "A solved challenge should be re-encrypted to the public key of the system.",
          "admin backdoor": "The problem with adding a backdoor, is that despite any precaution taken to prevent an intruder from discovering it, its chance of discovery is still proportional to how easy it is to use. It will be found, especially if any part of the source code is shared. What might make more sense is to simply create an admin account and follow the path to fully encrypted communications.",
          "encrypted channel": "Just like the 'schema' section of the schema, there should be an 'encrypted' section fo the schema that takes only a string input. It assumes this string is an encrypted blob of data representing the same JSON structure that would have been sent to the 'schema' section, but instead encrypted to the public key of the system and signed by the private key of the user. This should be accepted from any IP address or source, and would return an encrypted blob of data with exactly the same structure as would have been returned as the response to a normal request, except that it will appear only as a single string."
        }
      },
      "20190405": {
        "description": "Some future plans for handling payments",
        "children": {
          "address generation": "Addresses can be generated on the fly, and the level of security for an address only needs to be proportional to the amount of time holdings will be tied to it. For this reason, a low-sec address can be generated online for each payment, or for a fixed number of payments, and the resulting holdings can be moved to a high-sec address on a regular basis. Once the funds are associated with the high-sec address, there is no longer a security risk for the low-sec addresses.",
          "freezing": "The command to freeze a number of unfrozen payments should take the value of the high-sec address as an argument, and return a transaction signed by any number of low-sec addresses that have unfrozen payments. This transaction can then be broadcast immediately. A transaction report can be created to watch for the successful delivery of the funds.",
          "hot wallet": "16FzUdcw2HVnwXhT73ZbRm57ZqELSTyz2v"
        }
      },
      "20190427": "Preparations that must be made for release: Jormungand needs to be updated to support the latest Wotan changes. Wotan needs to support a demo mode.",
      "20190515": {
        "description": "Several things missing from jormungand and wotan.",
        "children": {
          "add payment id to get method in wotan": "",
          "add payment open flag to get method": "",
          "add ip methods to jormungand": "",
          "add active flag to fee_report get in jormungand": "",
          "add active flag to transaction_report get in jormungand": ""
        }
      },
      "20190518": {
        "description": "Can't finish today, but have a good idea of the tasks needed to round this out. Need to make sure that all three things; Jormungand, Wotan, and the docs, represent the same information.",
        "children": {
          "jormungand transaction match methods": "Should be quick"
        }
      },
      "20190519": {
        "description": "Working through the list",
        "children": {
          "jormungand ip methods": "done",
          "add active flag to fee_report get in jormungand": "done",
          "add active flag to transaction_report get in jormungand": "done",
          "remove token call from wotan and jormungand": "done"
        }
      },
      "20190520": {
        "description": "List",
        "children": {
          "docs system": "done",
          "docs address": "done",
          "docs announcement": "done",
          "docs update jormungand release": "1.4.0, done",
          "docs ip": "done",
          "docs spelling": "Model names should camel case and code highlighted, done",
          "docs moving to wotan templates": "done",
          "wotan add fields to system object": "done",
          "wotan error and type ids should be uuids": "done"
        }
      },
      "20190524": "Completed outlines for walkthroughs",
      "20190525": {
        "description": "Doing walkthroughs",
        "children": {
          "add wotan command to create system and address": "",
          "docs examples of each function return": "",
          "docs walkthroughs": ""
        }
      },
      "20190613": {
        "description": "Working on docs walkthroughs for Jormungand",
        "children": {
          "mistakes": "Every now and then, I encounter a horrible mistake or omission from wotan or jormungand. Quite incredible."
        }
      },
      "20190624": {
        "description": "Readying things for deployment",
        "children": {
          "templates": {
            "description": "Annoyingly, I have to modify the template to point the files in the django assets folder. I will record here what I do.",
            "children": {
              "jormungand.html": {
                "description": "Modifications made to jormungand",
                "children": {
                  "load static": "{% load static %}",
                  "links": "replace all instances of 'images', 'stylesheets', and 'javascripts' with {% static '...' %}",
                  "remove logo": "For now",
                  "replace jormungand zip link": "same static url"
                }
              },
              "stylesheets": "Should not need changing as they contain relative links"
            }
          },
          "deploy 1.4 of jormungand": "done",
          "fix block issues": {
            "description": "some issues that have arisen from the fee and transaction tasks",
            "children": {
              "fee_report": "Some value is apparently too long for the database",
              "blockchaininfo": "Some problem with None values returned from methods"
            }
          }
        }
      },
      "20190701": {
        "description": "Complete deployment by linking website",
        "children": {
          "redirecting to start page": "redirect view with permanent for 301 response",
          "google domains": {
            "description": "add DNS A to Elastic IP and CNAME for www subdomain.",
            "children": {
              "guide": "http://www.brianhoshi.com/blog/pointing-your-domain-to-an-aws-ec2-instance-with-google-domains/"
            }
          }
        }
      }
    }
  }
}
