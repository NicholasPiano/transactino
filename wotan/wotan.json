{
  "version": "1.0.0",
  "date": {
    "description": "Log entries by date",
    "children": {
      "20181119": {
        "description": "A very good, but frustrating, day for the websocket/http combo.",
        "children": {
          "t4": {
            "description": "Getting the websocket server to play with the ORM server.",
            "children": {
              "get_token": "The CSRF token needs to be returned to be used by subsequent POST requests."
            }
          },
          "t5": {
            "description": "filter tests to show Michal. I have discovered several problems while preparing it for him.",
            "children": {
              "fix non-existent types": "done. Maybe have more informative error if a type does not exist.",
              "prevent error checking from returning on filter": "There may be more functions where I should let all errors trigger."
            }
          }
        }
      },
      "20181120": {
        "description": "Need to think about the superadmin schema and how the superadmin will access the application. Not much has changed since before, so I should still be able to continue thinking about the 'status' schema and how it can be used to smuggle sensative data transparently. I also need to think about how to access details of the node websocket servers. I need to implement the schema system in javascript basically.",
        "children": {
          "status schema": "",
        }
      },
      "20181129": {
        "description": "Thinking about how the subscription activation should work",
        "children": {
          "subscription activation": "Creating a subscription should specify a number of days and an activation date. This is to allow activation dates in the future, so time can be purchased in advance. Completing a challenge allows the user to create an inactive subscription.",
          "payment block wrapper": "Payments need to request the block just like fee reports. The problem is, it can't be reduced.",
          "don't need wrapper": "Just get the latest block and scan it in the loop.",
          "address methods": "Need superadmin create and activate"
        }
      },
      "20181201": {
        "description": "Encountering some problems",
        "children": {
          "preserve arguments somehow": "Instead, should be able to run the method with no arguments",
          "challenge is consumed if there is an error": "This is fine, but maybe only consume the challenge if there is no error. This shouldn't be hard."
        }
      },
      "20181201": {
        "description": "Finally finished the work on connecting Jormungand to Wotan. Should be ready for deployment.",
        "children": {
          "deployment": "The general plan is to use an nginx proxy pointing at gunicorn application running the Wotan code. I will forego a DNS for now. Redis can be run as a service using systemd, or continue to be run within a screen as it is now for testing. For rsync, I need to be careful that certain files are not included in the deployment. It might be wise to write a separate deployment script in Yggdrasil. Deployment should upload files, run database migrations, and restart the gunicorn process.",
          "virtualenv": "Make sure I can use virtualenv with gunicorn.",
          "redis": "Run redis inside a service."
        }
      }
    }
  }
}
