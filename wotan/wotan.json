{
  "version": "1.0.0",
  "date": {
    "description": "Log entries by date",
    "children": {
      "20181119": {
        "description": "A very good, but frustrating, day for the websocket/http combo.",
        "children": {
          "t4": {
            "description": "Getting the websocket server to play with the ORM server.",
            "children": {
              "get_token": "The CSRF token needs to be returned to be used by subsequent POST requests."
            }
          },
          "t5": {
            "description": "filter tests to show Michal. I have discovered several problems while preparing it for him.",
            "children": {
              "fix non-existent types": "done. Maybe have more informative error if a type does not exist.",
              "prevent error checking from returning on filter": "There may be more functions where I should let all errors trigger."
            }
          }
        }
      },
      "20181120": {
        "description": "Need to think about the superadmin schema and how the superadmin will access the application. Not much has changed since before, so I should still be able to continue thinking about the 'status' schema and how it can be used to smuggle sensative data transparently. I also need to think about how to access details of the node websocket servers. I need to implement the schema system in javascript basically.",
        "children": {
          "status schema": "",
        }
      },
      "20181129": {
        "description": "Thinking about how the subscription activation should work",
        "children": {
          "subscription activation": "Creating a subscription should specify a number of days and an activation date. This is to allow activation dates in the future, so time can be purchased in advance. Completing a challenge allows the user to create an inactive subscription.",
          "payment block wrapper": "Payments need to request the block just like fee reports. The problem is, it can't be reduced.",
          "don't need wrapper": "Just get the latest block and scan it in the loop.",
          "address methods": "Need superadmin create and activate"
        }
      },
      "20181201": {
        "description": "Encountering some problems",
        "children": {
          "preserve arguments somehow": "Instead, should be able to run the method with no arguments",
          "challenge is consumed if there is an error": "This is fine, but maybe only consume the challenge if there is no error. This shouldn't be hard."
        }
      },
      "20181201": {
        "description": "Finally finished the work on connecting Jormungand to Wotan. Should be ready for deployment.",
        "children": {
          "deployment": "The general plan is to use an nginx proxy pointing at gunicorn application running the Wotan code. I will forego a DNS for now. Redis can be run as a service using systemd, or continue to be run within a screen as it is now for testing. For rsync, I need to be careful that certain files are not included in the deployment. It might be wise to write a separate deployment script in Yggdrasil. Deployment should upload files, run database migrations, and restart the gunicorn process.",
          "virtualenv": "Make sure I can use virtualenv with gunicorn.",
          "redis": "Run redis inside a service."
        }
      },
      "20190209": {
        "description": "Moving to using the blockchaininfo API until I can afford to run my own node (about $300/month).",
        "children": {
          "t8": {
            "description": "blockchaininfo modifications",
            "children": {
              "activate redis": "~$ redis-server",
              "restart postgres": "If in doubt, '~$ brew services restart postgresql'",
              "convert util file": "Similar to requests made to node, but slightly different keywords, and, fingers crossed, I won't need to request past transactions individually."
            }
          }
        }
      },
      "20190215": {
        "description": "Updated to 1.1 release, but a few more changes have to be made.",
        "children": {
          "action before challenge": "An action that requires a challenge should be partially completed if possible and provide an id or reference to complete the action in one go.",
          "encrypted challenges": "Challenges should be re-encrypted to the public key of the system",
          "public key": "There should be an endpoint to access the public key of the system"
        }
      },
      "20190322": {
        "description": "Getting very close to a release-worthy product. After adding a couple things, such as a System object for access to the system public key and a modified Address get method that returns an address for a specific ID referenced in a payment, it becomes usuable as a stand-alone service. The backend will still point at other APIs for now, but hopefully, will soon point at its own node backend.",
        "children": {
          "t12.2": {
            "description": "Add system schema",
            "children": {
              "add system schema": "Should only need a simple get method. Perhaps the ability to filter the properties returned, such as public key and signed disclaimer."
            }
          },
          "t12.3": {
            "description": "Modify address get method to allow filtering by ID",
            "children": {
              "modify address get": "Should be able to fetch address by ID. This will allow payments to be made at any time by fetching the required address value from the ID stored in the payment object.",
            }
          }
        }
      },
      "20190323": {
        "description": "I'm not putting a lot of effort into a superadmin schema yet, because most of those functions can be done with careful manual work. To release the product, payments need to be separated from transactions reports and schema tests need to be completed for the subscribed schema.",
        "children": {
          "t12.4": {
            "description": "Add transaction report",
            "children": {
              "copy fee report": "Shares many of the same fields and is mechanically similar.",
              "cannibalise payment": "Not much of interest, but there are some things worth taking."
            }
          },
          "move models": {
            "description": "I think Address should be moved to Transactino. Payment and Discount should be moved to their own app, for future reference to a TransactionReport backend. Challenge should be moved to its own app for future reference to the identity backend that is to come. Account will be updated in the future to reflect a connection to this backend.",
            "children": {
              "address": "Move Address to Transactino",
              "payment and discount": "Move to Payment app. Should call out to Transactino backend.",
              "challenge": "Move to Challenge app. Should eventually call out to identity backend.",
              "account": "Modify to include identity backend connection."
            }
          }
        }
      },
      "20190324": {
        "description": "Some ideas for payments and transaction reports",
        "children": {
          "tx reports": "Add 'has_been_viewed' flag, or something to that effect to give users 'new' information.",
          "payment app": "Maybe move Payment object and Address object. They both are relevant to tracking payments for subscriptions. Address is used by the sysadmin to control payments.",
          "fee report": "Move block wrapper and block wrapper prototypes to their own directories.",
          "t12.4": {
            "description": "Add transaction report",
            "children": {
              "add transaction report schema": "",
              "add transaction match schema": ""
            }
          }
        }
      }
    }
  }
}
