{
  "version": "1.0.0",
  "date": {
    "description": "Log entries by date",
    "children": {
      "20181119": {
        "description": "A very good, but frustrating, day for the websocket/http combo.",
        "children": {
          "t4": {
            "description": "Getting the websocket server to play with the ORM server.",
            "children": {
              "get_token": "The CSRF token needs to be returned to be used by subsequent POST requests."
            }
          },
          "t5": {
            "description": "filter tests to show Michal. I have discovered several problems while preparing it for him.",
            "children": {
              "fix non-existent types": "done. Maybe have more informative error if a type does not exist.",
              "prevent error checking from returning on filter": "There may be more functions where I should let all errors trigger."
            }
          }
        }
      },
      "20181120": {
        "description": "Need to think about the superadmin schema and how the superadmin will access the application. Not much has changed since before, so I should still be able to continue thinking about the 'status' schema and how it can be used to smuggle sensative data transparently. I also need to think about how to access details of the node websocket servers. I need to implement the schema system in javascript basically.",
        "children": {
          "status schema": "",
        }
      },
      "20181129": {
        "description": "Thinking about how the subscription activation should work",
        "children": {
          "subscription activation": "Creating a subscription should specify a number of days and an activation date. This is to allow activation dates in the future, so time can be purchased in advance. Completing a challenge allows the user to create an inactive subscription.",
          "payment block wrapper": "Payments need to request the block just like fee reports. The problem is, it can't be reduced.",
          "don't need wrapper": "Just get the latest block and scan it in the loop.",
          "address methods": "Need superadmin create and activate"
        }
      },
      "20181201": {
        "description": "Encountering some problems",
        "children": {
          "preserve arguments somehow": "Instead, should be able to run the method with no arguments",
          "challenge is consumed if there is an error": "This is fine, but maybe only consume the challenge if there is no error. This shouldn't be hard."
        }
      },
      "20181201": {
        "description": "Finally finished the work on connecting Jormungand to Wotan. Should be ready for deployment.",
        "children": {
          "deployment": "The general plan is to use an nginx proxy pointing at gunicorn application running the Wotan code. I will forego a DNS for now. Redis can be run as a service using systemd, or continue to be run within a screen as it is now for testing. For rsync, I need to be careful that certain files are not included in the deployment. It might be wise to write a separate deployment script in Yggdrasil. Deployment should upload files, run database migrations, and restart the gunicorn process.",
          "virtualenv": "Make sure I can use virtualenv with gunicorn.",
          "redis": "Run redis inside a service."
        }
      },
      "20190209": {
        "description": "Moving to using the blockchaininfo API until I can afford to run my own node (about $300/month).",
        "children": {
          "t8": {
            "description": "blockchaininfo modifications",
            "children": {
              "activate redis": "~$ redis-server",
              "restart postgres": "If in doubt, '~$ brew services restart postgresql'",
              "convert util file": "Similar to requests made to node, but slightly different keywords, and, fingers crossed, I won't need to request past transactions individually."
            }
          }
        }
      },
      "20190215": {
        "description": "Updated to 1.1 release, but a few more changes have to be made.",
        "children": {
          "action before challenge": "An action that requires a challenge should be partially completed if possible and provide an id or reference to complete the action in one go.",
          "encrypted challenges": "Challenges should be re-encrypted to the public key of the system",
          "public key": "There should be an endpoint to access the public key of the system"
        }
      },
      "20190322": {
        "description": "Getting very close to a release-worthy product. After adding a couple things, such as a System object for access to the system public key and a modified Address get method that returns an address for a specific ID referenced in a payment, it becomes usuable as a stand-alone service. The backend will still point at other APIs for now, but hopefully, will soon point at its own node backend.",
        "children": {
          "t12.2": {
            "description": "Add system schema",
            "children": {
              "add system schema": "Should only need a simple get method. Perhaps the ability to filter the properties returned, such as public key and signed disclaimer."
            }
          },
          "t12.3": {
            "description": "Modify address get method to allow filtering by ID",
            "children": {
              "modify address get": "Should be able to fetch address by ID. This will allow payments to be made at any time by fetching the required address value from the ID stored in the payment object.",
            }
          }
        }
      },
      "20190323": {
        "description": "I'm not putting a lot of effort into a superadmin schema yet, because most of those functions can be done with careful manual work. To release the product, payments need to be separated from transactions reports and schema tests need to be completed for the subscribed schema.",
        "children": {
          "t12.4": {
            "description": "Add transaction report",
            "children": {
              "copy fee report": "Shares many of the same fields and is mechanically similar.",
              "cannibalise payment": "Not much of interest, but there are some things worth taking."
            }
          },
          "move models": {
            "description": "I think Address should be moved to Transactino. Payment and Discount should be moved to their own app, for future reference to a TransactionReport backend. Challenge should be moved to its own app for future reference to the identity backend that is to come. Account will be updated in the future to reflect a connection to this backend.",
            "children": {
              "address": "Move Address to Transactino",
              "payment and discount": "Move to Payment app. Should call out to Transactino backend.",
              "challenge": "Move to Challenge app. Should eventually call out to identity backend.",
              "account": "Modify to include identity backend connection."
            }
          }
        }
      },
      "20190324": {
        "description": "Some ideas for payments and transaction reports",
        "children": {
          "tx reports": "Add 'has_been_viewed' flag, or something to that effect to give users 'new' information.",
          "payment app": "Maybe move Payment object and Address object. They both are relevant to tracking payments for subscriptions. Address is used by the sysadmin to control payments.",
          "fee report": "Move block wrapper and block wrapper prototypes to their own directories.",
          "t12.4": {
            "description": "Add transaction report",
            "children": {
              "add transaction report schema": "",
              "add transaction match schema": "",
              "tests": {
                "description": "Some changes from the FeeReport schema other than name, obviously.",
                "children": {
                  "delete": "Should test that all TransactionMatch objects are also deleted.",
                  "create": "Different properties than FeeReport."
                }
              }
            }
          },
          "challenge and payment checking depend on errors and arguments": "To improve user experience, I tried to remove the need to add arguments when running a method without a completed challenge. This would allow the user to hit the challenge block without wasting time putting arguments in the request. Before, I tried to delay the error checking until after the challenge had been accepted, but it seems better to do two things: first, do not check any challenges or payments if any errors occur earlier in the pipeline, and second, incorporate a check for a closed, unused challenge into the decision for whether or not to require arguments to be included.",
          "subscription create method and tests": "",
          "subscription activate method and tests": "",
          "ip create method and tests": "",
        }
      },
      "20190325": {
        "description": "Continuing on with improvements made to challenges. Similar changes to payments will follow.",
        "children": {
          "account subscribed lock": "done",
          "account superadmin lock": "done",
          "account unsubscribed delete": "done",
          "account unsubscribed verify": "done",
          "ip subscribed create": "This involves both challenges and payments. This will require some more thought to establish the exact order of events and how challenges and payments interact with one another. DONE.",
          "ip subscribed delete": "done",
          "ip subscribed get": "done",
          "subscription create": "",
          "create": "The current method in place is a fun idea, but it's a bit of a solution without a problem at the moment. Basically, it allows a request to contain arbitrary temporary IDs that identify resources to be created so that they can be matched to the resulting database IDs once they return to the client. I will remove this in favour of a simpler create method. Just kidding. I'm keeping it. It's fricking awesome.",
          "set": "done",
        }
      },
      "20190327": {
        "description": "Almost finished with payment changes. Now makes way more sense.",
        "children": {
          "note about jormungand changes": "No is_payment_confirmed field on subscription",
          "t12.4": {
            "description": "Transaction report, but made lots of changes to the ways challenges and payments work.",
            "children": {
              "tests": {
                "description": "Finishing testing before merging",
                "children": {
                  "test_unsubscribed": "done",
                  "test_transactino": "done",
                }
              }
            }
          },
          "todo": {
            "description": "This should be all I need to deploy a reasonable application",
            "children": {
              "update descriptions": "",
              "top-down tests": "Need subscribed tests, account verified",
              "update jormungand": "Long overdue. The current version does not even support the API as it stands.",
              "update webpage": "Clearer presentation of jormungand download",
              "do deployment": "",
            }
          }
        }
      },
      "20190330": {
        "description": "Getting close to the first release",
        "children": {
          "t12.5": {
            "description": "Add descriptions",
            "children": {
              "unsubscribed": "Descriptions were mostly for the unsubscribed schema. More will need to be added for the subscribed schema when it is completed.",
              "overlapping tests problem": "The overlapping tests problem was solved by removing globally created dictionaries as default values of methods that subsequently modified those values in the body of the method. These values were created at import time, thus were the same for each test. This could lead to values remaining in these default values between tests, or more dangerously, between requests. This is very bad for a web server, and cements my opinion that a webserver should be designed entirely functionally, with no trace of state whatsoever. Python is not designed to accomodate this.",
            }
          },
          "t12.6": {
            "description": "Adding announcement model. Need a way to interrupt normal operations by changing database values, rather than by modifying the code running on a webserver. Use cases for this include warnings about upcoming downtime for actual updates and announcements about general status of the system or upcoming planned changes.",
            "children": {
              "normal model": "It should behave like the System model, roughly. Only active announcements can be fetched by normal plebs.",
              "inserted into every response": "I feel like this should not be done for general performance reasons. Perhaps a small note could be placed in the response, rather than bundling every active announcement into every response. In any case, a similar mechanism to external querysets could be used.",
              "should be signed by the system": "Can be a foreign key to system model. Signing is part of the creation process.",
            }
          }
        }
      },
      "20190331": {
        "description": "Adding Announcement model, dashboard schema, and updating tests",
        "children": {
          "t12.6": "Added announcement model and added a top-level schema entry that will activate when there are active announcements. This adds a bit of data to the response, but nothing too overbearing, and it leaves the Announcement model schema nice and consistent with the rest of the model schemas.",
          "t12.7": {
            "description": "Top-level tests. Mostly the unsubscribed-but-verified schema and the subscribed schema.",
            "children": {
              "challenge get filter by id": "done",
              "finish unsubscribed tests": "done",
              "subscribed tests": {
                "description": "A lot of tests to write",
                "children": {
                  "minimise path testing": {
                    "description": "I don't think it's a very good way to test a result, and definitely not an array of paths. This is very brittle. Paths should be tested individually. It's ok to create an array of paths from a response and test a series of paths for membership in that array, but not order. Also, it is preferable to test actual values fetched with a path rather than testing for the presence of the path itself.",
                    "children": {
                      "subscribed - test_subscription_get": "done",
                      "subscribed - test_payment_get": "done",
                      "subscribed - test_ip_get": "done",
                      "subscribed - test_challenge_get": "done",
                      "subscribed - test_system_get": "done",
                      "subscribed - test_announcement_get": "done",
                      "subscribed - test_schema_paths": "done",
                      "unsubscribed - not verified - test_schema_paths": "done",
                      "unsubscribed - not verified - test_announcement_get": "done",
                      "unsubscribed - not verified - test_challenge_get": "done",
                      "unsubscribed - not verified - test_system_get": "done",
                      "unsubscribed - verified - test_schema_paths": "done",
                      "unsubscribed - verified - test_subscription_get": "done",
                      "unsubscribed - verified - test_payment_get": "done",
                      "anonymous - test_schema_paths": "done",
                      "anonymous - test_system_get": "done"
                    }
                  },
                  "ip_get": "Should allow get by ID or value",
                  "test_ip_create": "",
                  "test_ip_create_beyond_max": "",
                  "test_ip_delete": "",
                  "test_subscription_create": "",
                  "test_subscription_activate": "",
                  "test_fee_report_create": "",
                  "test_fee_report_delete": "",
                  "test_fee_report_get": "",
                  "test_transaction_report_create": "",
                  "test_transaction_report_delete": "",
                  "test_transaction_report_get": "",
                  "test_transaction_report_activate": "",
                  "transaction_match_get": "",
                }
              }
            }
          }
        }
      },
      "20190401": {
        "description": "Final leg with tests, etc. After these tests, are done, I think deployment can begin.",
        "children": {
          "t12.7": {
            "description": "Top-level tests.",
            "children": {
              "subscribed tests": {
                "description": "A lot of tests to write",
                "children": {
                  "test_ip_create": "done",
                  "test_ip_create_beyond_max": "done",
                  "test_ip_delete": "done",
                  "test_subscription_create": "done",
                  "test_subscription_activate": "",
                  "test_fee_report_create": "",
                  "test_fee_report_delete": "",
                  "test_fee_report_get": "",
                  "test_transaction_report_create": "",
                  "test_transaction_report_delete": "",
                  "test_transaction_report_get": "",
                  "test_transaction_report_activate": "",
                  "transaction_match_get": ""
                }
              }
            }
          }
        }
      },
      "20190402": {
        "description": "Final leg with tests, etc. After these tests, are done, I think deployment can begin.",
        "children": {
          "skegyuk url": "https://beyondcc.co.uk/contact-us",
          "t12.7": {
            "description": "Top-level tests.",
            "children": {
              "subscribed tests": {
                "description": "A lot of tests to write",
                "children": {
                  "test_subscription_activate": "done",
                  "test_fee_report_create": "done",
                  "test_fee_report_delete": "done",
                  "test_fee_report_get": "done",
                  "test_transaction_report_create": "done",
                  "test_transaction_report_delete": "done",
                  "test_transaction_report_get": "done",
                  "test_transaction_report_activate": "done"
                }
              }
            }
          },
          "t12.8": {
            "description": "TransactionMatch schema",
            "children": {
              "get": "Should allow filtering by a variety of parameters, including parent transaction report parameters.",
              "dismiss": "Based on get. Uses resulting queryset to set all is_new properties to False.",
              "subscribed tests": {
                "description": "Finish off top-level tests",
                "children": {
                  "transaction_match_get": "done",
                  "transaction_match_dismiss": "done"
                }
              }
            }
          },
          "after tests": {
            "description": "A set of tasks I can see in the future",
            "children": {
              "payment backend": "Create small backend script for payments that watched Block object. Normally, I would want a service to have a subscription to a transaction service such as this one, but in this case, it would be quite self-referential. I will need to think more about connections between services.",
              "dashboard": "Maybe experiment with putting this together. Should summarise things like challenges, payments, subscriptions, fee reports, and transaction reports."
            }
          }
        }
      },
      "20190403": {
        "description": "Most coding completed. Just need to add the payment backend.",
        "children": {
          "payment backend": "Very similar to what I had before. The purpose of segregating the backend implementation from the payment model is to prepare for the backend to be external."
        }
      },
      "20190404": {
        "description": "Generating first address and updating jormungand",
        "children": {
          "t12.10": {
            "description": "Update Jormungand",
            "children": {
              "payment schema": "Revert to default instance schema to include relationships"
            }
          }
        }
      },
      "20190405": {
        "description": "Need to establish consistent procedure for making peanut payments.",
        "children": {
          "payment testing plan": {
            "description": "A list of steps for properly testing the payment process",
            "children": {
              "create transaction from payment address to localpeanuts": "",
              "enable test server to watch for payment": "",
              "make payment from localpeanuts to test address": "",
              "watch for payment": ""
            }
          }
        }
      },
      "20190406": {
        "description": "Only part of the process left is to test the first address by making a payment.",
        "children": {
          "payment test": {
            "description": "Actually create a real transaction and broadcast it to get the funds out of the address",
            "children": {
              "create transaction from payment address to localpeanuts": "",
              "enable test server to watch for payment": "",
              "make payment from localpeanuts to test address": "",
              "watch for payment": ""
            }
          }
        }
      },
      "20190407": {
        "description": "Last day before work again. I'm putting off the actual transaction for fear that it might not work. I should just go ahead with it. I'm also in the park right now, so I'm going to do a couple things that do not require an internet connection.",
        "children": {
          "delete payment": "You should be able to delete a payment if you do not intend to make it, similar to deleting a challenge.",
          "address schema": "remove attributes and relationships"
        }
      },
      "20190428": {
        "description": "Thinking about demo mode",
        "children": {
          "t12.11": {
            "description": "demo mode",
            "children": {
              "should be flag on account model": "This would allow a user to toggle to non-demo mode if they so choose. Going from demo to non-demo should remove all subscriptions, reports, payments, and challenges. Going from non-demo to demo should have no effect on stored data.",
              "bitcoin blocks": "There should be a loop of ten pre-processed blocks. The last should have its next block hash set to the first to complete the loop. This should be done in such a way as to tie into the existing report checking stuff.",
              "payments": "All payments should close instantly in demo mode. This should perhaps mean that I have a flag on the payment model that indicates that it is a demo payment. Similar perhaps for subscriptions and challenges, although challenges will work the same way no matter the mode. The payment loop can handle demo and non-demo payments separately (in two different loops).",
              "flags": "Account, FeeReport, TransactionReport, Payment",
              "transaction_report": "Need support in Jormungand",
              "mute announcements": "Flag on Account model that needs to be unset when a new announcement is created"
            }
          }
        }
      },
      "20190520": {
        "description": "Add fields to system",
        "children": {
          "guarantee": "done",
          "disclaimer": "done"
        }
      },
      "20190522": {
        "description": "Wrapping up before deployment",
        "children": {
          "t12.12.4": {
            "description": "System fields",
            "children": {
              "tests": {
                "description": "A bunch of paths added obviously",
                "children": {
                  "apps.transactino.api.schema.transactino.test.test_unsubscribed": "done",
                  "apps.transactino.api.schema.transactino.test.test_subscribed": "done",
                  "apps.transactino.api.schema.transactino.test.test_anonymous": "done",
                  "apps.transactino.api.schema.transactino.test.test_transactino": "done",
                  "apps.subscription.models.account.schema.anonymous.methods.test.test_create": "done"
                }
              }
            }
          }
        }
      },
      "20190615": {
        "description": "Small changes to blockchaininfo requests to handle failure. Also working on end of transaction report walkthroughs.",
        "children": {
          "blockchaininfo requests": "Handle failure as None",
        }
      }
    }
  }
}
